#!/usr/bin/env node
const Program = require('commander')
const logger = require('../lib/logger')
const { version, description } = require('../package.json')

Program
  .version(version, '-v, --version', '版本号')
  .usage(`<command> [options], 当前版本: ${version}, 文档: https://github.com/szh0526/mp-cli/blob/main/README.md`)
  .description(description)
  .command('init', '初始化')
  .alias('i')
  .command('build', '小程序编译')
  .alias('b')
  .command('create', '新建页面或组件')
  .alias('c')
  .command('preview', '预览小程序，生成二维码')
  .alias('p')
  .command('open', '启动微信开发者工具')
  .alias('o')
  .command('login', '小程序登陆')
  .alias('l')
  .command('buildNpm', '小程序构建npm|plugin')
  .alias('bn')
  .command('audit', '项目审计')
  .alias('a')
  .command('upload', '上传')
  .alias('u')
  .command('template', '脚手架项目模板')
  .alias('t')

// // 自定义指令
// Program
//   .command('run <cmd>')
//   .description('当前<cmd>包含')
//   .action(async (cmd, options) => {
//     console.log('自定义命令', cmd, options)
//     // // 当前命令
//     // const curScript = getUserConf().customScripts.find((el, idx) => el.name === cmd)

//     // // 执行回调
//     // await curScript.callback.call(originPrototype, cmd, options)
//   })

Program.parse(process.argv)

// 命令校验
const VALID_COMMAND = [
  'help',
  '--help', '-h',
  '--version', '-v',
  'init', 'i',
  'build', 'b',
  'create', 'c',
  'preview', 'p',
  'buildNpm', 'bn',
  'open', 'o',
  'login', 'l',
  'audit', 'a',
  'upload', 'u',
  'template', 't',
]

if (!VALID_COMMAND.includes(process.argv[2])) {
  logger.warn('不支持的命令，请查看使用帮助\n')
  Program.help()
}
