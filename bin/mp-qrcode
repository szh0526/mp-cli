#!/usr/bin/env node
const Program = require('commander')
const inquirer = require('inquirer')
const fuzzy = require('fuzzy')
const logger = require('../lib/logger.js')
const { previewQrCode } = require('../scripts/wxcli/qrcode')
const { projects } = require('../package.json')
const execSync = require('child_process').execSync;

// 注册插件
inquirer.registerPrompt(
  'autocomplete',
  require('@moyuyc/inquirer-autocomplete-prompt'),
)

const findProject = (appName) => projects.find(x => x.appName === appName)
const findEnvironment = (environments) => (envName) => environments.find(x => x.name === envName)

//根据项目选择环境
const switchEnvByProject = (app) => {
  const { environments = [] } = app
  return new Promise(resolve => {
    inquirer
      .prompt([{
        type: 'list',
        name: 'env',
        message: '请选择预览二维码环境',
        choices: environments.map(x => x.name),
        default: "开发版",
      }]).then((answer) => {
        const environmentConfig = findEnvironment(environments)(answer.env)
        resolve(environmentConfig)
      })
  })
}

//根据源代码分支切换分支
const switchBranchBySource = (source, env) => {
  return new Promise(resolve => {
    let question = []

    //线上，体验，不让选， 本地可选
    if (env === 'prod') {
      question = [{
        type: 'list',
        name: 'branch',
        message: '请选择分支',
        choices: ['master'],
      }]
    } else if (env === 'gray') {
      question = [{
        type: 'list',
        name: 'branch',
        message: '请选择分支',
        choices: ['release'],
      }]
    } else {
      const branchText = execSync(`git ls-remote -h ${source}.git`);
      // 正则截取分支列表
      const gitBranchRegExp = /(?<=refs\/heads\/).*?(?=\s)/gi
      const branchList = branchText.toString("utf8").match(gitBranchRegExp)
      question = [{
        type: 'autocomplete',
        name: 'branch',
        message: '请选择分支',
        choices: [],
        suggestOnly: false,
        source(answers, input) {
          return Promise.resolve(
            fuzzy.filter(input, branchList)
              .map((el) => el.string)
          )
        },
        filter(input) {
          return branchList.find(x => x === input)
        },
      }]
    }

    inquirer
      .prompt(question).then((answer) => {
        resolve(answer.branch)
      })
  })
}

Program.action(() => {
  inquirer
    .prompt([
      {
        type: 'autocomplete',
        name: 'app',
        message: '请选择项目',
        choices: [],
        suggestOnly: false,
        source(answers, input) {
          return Promise.resolve(
            fuzzy
              .filter(input, projects.map(x => x.appName))
              .map((el) => el.original),
          )
        },
        filter(input) {
          return input
        }
      }
    ])
    .then(async (answer) => {
      const { app } = answer
      const projectItem = findProject(app)
      const environmentConfig = await switchEnvByProject(projectItem)
      const branch = await switchBranchBySource(projectItem.git,environmentConfig.env)
      const url = `${projectItem.git}/#${branch}`
      // console.log(branch,environmentConfig,url)
      previewQrCode(url, branch, environmentConfig, environmentConfig.env)
    })
    .catch((error) => {
      logger.error(error.stack)
      process.exit(1)
    })
})

Program.parse(process.argv)
